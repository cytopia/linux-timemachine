#!/bin/sh -eu
#
# https://serverfault.com/questions/834994/rsync-only-keep-10-backup-folders

################################################################################
# Variables
################################################################################

# Credit variables
MY_NAME="timemachine"
MY_DESC="OSX-like timemachine cli script for Linux and BSD (and even OSX)"
MY_PROJ="https://github.com/cytopia/linux-timemachine"
MY_AUTH="cytopia"
MY_MAIL="cytopia@everythingcli.org"
MY_VERS="0.3"
MY_DATE="2018-12-22"

# cmd [-r] <src> <dst> [rsync opts]
verbose=   # -v Verbose output



################################################################################
# Functions
################################################################################

print_usage() {
	echo "Usage: ${MY_NAME} [-v] <source> <destination> -- [rsync opts]"
	echo "       ${MY_NAME} -V"
	echo "       ${MY_NAME} -h"
	echo
	echo "This shell script mimics the behavior of OSX's timemachine."
	echo "It uses rsync to incrementally backup your data to a different directory."
	echo "All operations are incremental, atomic and automatically resumable."
	echo
	echo "By default the only rsync option used is --recursive."
	echo "This is due to the fact that some remote NAS implementations do not support"
	echo "symlinks, changing owner, group or permissions (due to restrictive ACL's)."
	echo "If you want to use any of those options you can simply append them."
	echo "See Example section for how to."
	echo
	echo "Required arguments:"
	echo "  <source>        Source directory"
	echo "  <destination>   Destination directory. Can also be a remote server"
	echo
	echo "Options:"
	echo "  -v, --verbose   Be verbose."
	echo
	echo "Misc Options:"
	echo "  -V, --version   Print version information and exit"
	echo "  -h, --help      Show this help screen"
	echo
	echo "Examples:"
	echo "  Simply backup one directory recursively"
	echo "      timemachine /home/user /data"
	echo "  Do the same, but be verbose"
	echo "      timemachine -v /home/user /data"
	echo "  Append rsync options and be verbose"
	echo "      timemachine /home/user /data -- --links --times --perms --special"
	echo "      timemachine --verbose /home/user /data -- --archive --progress --verbose"
	echo "  Recommendation for cron run (no stdout, but stderr)"
	echo "      timemachine /home/user /data -- -q"
	echo "      timemachine /home/user -v /data -- --verbose > /var/log/timemachine.log"
}

print_version() {
	echo "${MY_NAME} v${MY_VERS} (${MY_DATE})"
	echo "${MY_DESC}"
	echo
	echo "Copyright (c) 2017 ${MY_AUTH} <${MY_MAIL}>"
	echo "${MY_PROJ}"
}

logmsg() {
	# Only log to stdout when verbose is turned on
	if [ "${verbose}" = "verbose" ]; then
		echo "$(date +'%Y-%m-%d %H:%M:%S') ${MY_NAME}: [INFO]  ${*}"
	fi
}

logerr() {
	echo "$(date +'%Y-%m-%d %H:%M:%S') ${MY_NAME}: [ERROR] ${*}" >&2
}



################################################################################
# Entrypoint: Parse cmd args
################################################################################
parse_args() {
	# Parse input args with getopts
	while getopts :vhV-: opt; do
		# ----- long options
		if [ "$opt" = "-" ]; then
			opt=$OPTARG
			[ -z "$opt" ] && break	# "--" terminates argument processing
		fi
		# shellcheck disable=SC2214
		case $opt in
			# ---- Help / version
			V | version)
				print_version
				exit
				;;
			h | help)
				print_usage
				exit
				;;
			# ----- Options
			v | verbose)
				verbose="verbose"
				;;
			\?)	logerr "Unknown option -$OPTARG, see -h for help."
				exit 2
				;;
			*)	logerr "Unknown option --$opt, see -h for help."
				exit 2
				;;
		esac
	done
}


################################################################################
# Entrypoint: Validate cmd args
################################################################################
validate_args() {
	echo "${@}"
	# Check arg count
	[ "${#}" -lt "2" ] && logerr "<source> and <destination> are required. See -h for help." && exit 1

	# Source validity
	[ ! -d "${1}" ] && [ ! -f "${1}" ] && logerr "Source directory does not exist. See -h for help." && exit 1

	# Target directory check
	if [ ! -d "${2}" ] && [ ! -f "${2}" ]; then
		echo "Target directory does not exist."
		echo "Would you like to create a new one?[y/n]: "
		read -r response
		if [ "$response" != "${response#[Yy]}" ] ;then
			mkdir "${2}"
		else
			logerr "Target directory does not exist. See -h for help." && exit 1
		fi
	fi

	# Check for rsync binary
	if ! command -v rsync >/dev/null 2>&1; then
		logerr "rsync binary not found but required." && exit 1
	fi
}



################################################################################
# Main Entrypoint
################################################################################
parse_args "${@}"
shift $((OPTIND-1))		# remove parsed options and args from $@ list
validate_args "${@}"
# Get arguments and remove them afterwards to have ${@} contain
# all additional rsync options
SRC="${1}"
DEST="${2}"
shift 2
[ "${#}" -ge 1 ] && [ "${1}" = "--" ] && shift

# Name of the backup directory
BACKUP="$( date '+%Y-%m-%d__%H-%M-%S' )"

# Name of the backup directory which is currently in progress (incomplete)
# Used for atomic backups
BACKUP_INPROGRESS=".inprogress"

# Name of the symlink pointing to the latest successful backup
BACKUP_LATEST="current"

# Rsync partial directory to store partially transferred files
# in order to speed up a possible resume for the next run
RSYNC_PARTIAL=".partial"


###
### 1/3 Incremental, resumable and atomic rsync backup
###

# [incremental] --link-dest:          Used to hardlink files which are equal (instead of re-copying them)
# [resume]      --partial-dir:        Where to store unfinished files for resume
# [atomic]      ${BACKUP_INPROGRESS}: Tmp dest dir for atomic operations

logmsg "Starting incremental backup"
logmsg "\$ rsync $* ${SRC} ${DEST}/${BACKUP_INPROGRESS}"

# Only link destination if it already exists
if test -L "../${BACKUP_LATEST}"; then
	rsync \
		--recursive \
		--delete \
		--delete-excluded \
		--partial-dir="${RSYNC_PARTIAL}" \
		--link-dest="../${BACKUP_LATEST}" \
		"$@" \
		"${SRC}" "${DEST}/${BACKUP_INPROGRESS}"
else
	rsync \
		--recursive \
		--delete \
		--delete-excluded \
		--partial-dir="${RSYNC_PARTIAL}" \
		"$@" \
		"${SRC}" "${DEST}/${BACKUP_INPROGRESS}"
fi


###
### 2/3 Finish atomic operation
###

# Move temporary atomic directory to chosen dest directory
logmsg "\$ mv ${BACKUP_INPROGRESS} ${BACKUP}"
mv "${DEST}/${BACKUP_INPROGRESS}" "${DEST}/${BACKUP}"


###
### 3/3 Latest symlink
###

# Remove current 'latest' symlink
if [ -L "${DEST}/${BACKUP_LATEST}" ]; then
	logmsg "\$ rm ${BACKUP_LATEST}"
	rm "${DEST}/${BACKUP_LATEST}"
fi

# Set new 'latest' link-dest for incremental backups
logmsg "\$ ln -s ${BACKUP} ${BACKUP_LATEST}"
ln -s "${BACKUP}" "${DEST}/${BACKUP_LATEST}"


###
### Finished
###
logmsg "Incremental backup finished"
